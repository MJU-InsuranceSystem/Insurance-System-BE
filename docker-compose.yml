services:
  app:
    image: public.ecr.aws/${DEV_ECR_REGISTRY_ALIAS}/distribute/dev:latest
    container_name: distribute-container
    ports:
      - "80:8080"
      - "9292:9292"
    volumes:
      - ./logs/all:/app/logs/all  # ALL_LOG 파일 경로 마운트
      - ./logs/warn:/app/logs/warn  # WARN_LOG 파일 경로 마운트
      - ./logs/error:/app/logs/error  # ERROR_LOG 파일 경로 마운트
    networks:
      - my_network
    environment:
      - DEV_ECR_REGISTRY_ALIAS=${DEV_ECR_REGISTRY_ALIAS}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - my_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    restart: always
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - my_network

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command:
      - '--config.file=/etc/loki/loki-config.yml'
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml
    restart: always
    networks:
      - my_network

networks:
  my_network: # 네트워크 정의
    driver: bridge


