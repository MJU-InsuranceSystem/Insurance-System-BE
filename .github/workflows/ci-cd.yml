name: CI/CD Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4

      # Java 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # application.yml 생성
      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.YML }}" > ./src/main/resources/application.yml
        shell: bash

      # application-prod.yml 생성
      - name: Create application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.PROD_YML }}" > ./src/main/resources/application-prod.yml
        shell: bash

      # Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      # AWS Credentials 설정
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ECR Public 로그인
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      # ECR Public 기존 이미지 삭제
      - name: Delete previous image in Amazon ECR Public
        env:
          REGISTRY_ALIAS: ${{ secrets.DEV_ECR_REGISTRY_ALIAS }}
          REPOSITORY: distribute/dev
        run: |
          aws ecr-public batch-delete-image \
              --repository-name distribute/dev \
              --image-ids imageTag=latest \
              --region us-east-1 || echo "No existing image with tag latest found."

      # Docker 이미지 빌드 및 푸시
      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: ${{ secrets.DEV_ECR_REGISTRY_ALIAS }}
          REPOSITORY: distribute/dev
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

      # docker-compose.yml 업데이트
      - name: Update docker-compose file
        uses: mikefarah/yq@master
        with:
          cmd: yq '.services.app.image = "public.ecr.aws/${{ secrets.DEV_ECR_REGISTRY_ALIAS }}/distribute/dev:latest"' -i docker-compose.prod.yml

      # docker-compose.yml 복사
      - name: Copy docker-compose file locally
        run: cp docker-compose.prod.yml docker-compose.yml

      # docker-compose.yml 업로드
      - name: Upload docker-compose file to EC2
        env:
          SSH_KEY: ${{ secrets.DEV_EC2_SSH_KEY }}
          HOST: 3.39.206.214
          USER: ubuntu
        run: |
          echo "${SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -o StrictHostKeyChecking=no -i ec2_key.pem docker-compose.yml ${USER}@${HOST}:~/deployment/docker-compose.yml

      # EC2에서 Docker Compose 실행
      - name: SSH into EC2 and Deploy with Docker Compose
        env:
          SSH_KEY: ${{ secrets.DEV_EC2_SSH_KEY }}
          HOST: 3.39.206.214
          USER: ubuntu
        run: |
          echo "${SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${USER}@${HOST} << 'EOF'
            mkdir -p ~/deployment
            cd ~/deployment
          
            docker-compose pull
            docker-compose up -d
          EOF
