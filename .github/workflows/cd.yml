on: workflow_dispatch

jobs:
  deploy:

    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin public.ecr.aws

      - name: Update docker-compose file
        uses: mikefarah/yq@master
        with:
          cmd: yq '.services.app.image = "public.ecr.aws/${{ secrets.DEV_ECR_REGISTRY_ALIAS }}/distribute/dev:latest"' -i docker-compose.yml

      - name: Copy docker-compose file locally
        run: cp docker-compose.prod.yml docker-compose.yml

      - name: Upload docker-compose file to EC2
        env:
          SSH_KEY: ${{ secrets.DEV_EC2_SSH_KEY }}
          HOST: 3.39.206.214
          USER: ubuntu
        run: |
          echo "${SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -o StrictHostKeyChecking=no -i ec2_key.pem docker-compose.yml ${USER}@${HOST}:~/deployment/docker-compose.yml

      - name: SSH into EC2 and Deploy with Docker Compose
        env:
          SSH_KEY: ${{ secrets.DEV_EC2_SSH_KEY }}
          HOST: 3.39.206.214
          USER: ubuntu
        run: |
          echo "${SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          
          # SSH into EC2 and run deployment commands
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${USER}@${HOST} << 'EOF'
            # Navigate to deployment directory
            mkdir -p ~/deployment
            cd ~/deployment
          
            # Pull the latest image and start the container
            docker-compose pull
            docker-compose up -d
          EOF
